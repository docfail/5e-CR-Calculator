import csv
import re


hmm = [['0', '+2', '<=13', '1-6', '<=+3', '0-1', '<=13'], ['1/8', '+2', '13', '7-35', '+3', '2-3', '13'], ['1/4', '+2', '13', '36-49', '+3', '4-5', '13'], ['1/2', '+2', '13', '50-70', '+3', '6-8', '13'], ['1', '+2', '13', '71-85', '+3', '9-14', '13'], ['2', '+2', '13', '86-100', '+3', '15-20', '13'], ['3', '+2', '13', '101-115', '+4', '21-26', '13'], ['4', '+2', '14', '116-130', '+5', '27-32', '14'], ['5', '+3', '15', '131-145', '+6', '33-38', '15'], ['6', '+3', '15', '146-160', '+6', '39-44', '15'], ['7', '+3', '15', '161-175', '+6', '45-50', '15'], ['8', '+3', '16', '176-190', '+7', '51-56', '16'], ['9', '+4', '16', '191-205', '+7', '57-62', '16'], ['10', '+4', '17', '206-220', '+7', '63-68', '16'], ['11', '+4', '17', '221-235', '+8', '69-74', '17'], ['12', '+4', '17', '236-250', '+8', '75-80', '17'], ['13', '+5', '18', '251-265', '+8', '81-86', '18'], ['14', '+5', '18', '266-280', '+8', '87-92', '18'], ['15', '+5', '18', '281-295', '+8', '93-98', '18'], ['16', '+5', '18', '296-310', '+9', '99-104', '18'], ['17', '+6', '19', '311-325', '+10', '105-110', '19'], ['18', '+6', '19', '326-340', '+10', 'lll-116', '19'], ['19', '+6', '19', '341-355', '+10', '117-122', '19'], ['20', '+6', '19', '356-400', '+10', '123-140', '19'], ['21', '+7', '19', '401-445', '+11', '141-158', '20'], ['22', '+7', '19', '446-490', '+11', '159-176', '20'], ['23', '+7', '19', '491-535', '+11', '177-194', '20'], ['24', '+7', '19', '536-580', '+12', '195-212', '21'], ['25', '+8', '19', '581-625', '+12', '213-230', '21'], ['26', '+8', '19', '626-670', '+12', '231-248', '21'], ['27', '+8', '19', '671-715', '+13', '249-266', '22'], ['28', '+8', '19', '716-760', '+13', '267-284', '22'], ['29', '+9', '19', '761-805', '+13', '285-302', '22'], ['30', '+9', '19', '806-850', '+14', '303-320', '23']]

class numRange:
    def __init__(self,rangestr):
        vals=rangestr.split('-')
        self.low=int(vals[0])
        self.high=int(vals[1])

    def __lt__(self, other):
        return other>self.high
    def __eq__(self, other):
        return (other<=self.high and other>=self.low)
    def __gt__(self, other):
        return other<self.low
    def __str__(self):
        return '['+str(self.low)+'-'+str(self.high)+']'

refTable = {}
refTable['cr'] = [x[0] for x in hmm]
refTable['hp']=[numRange(x[3]) for x in hmm]
refTable['ac']=[x[2] for x in hmm]

def HPCR(hp):
    hps=refTable['hp']
    if(hp<=0):
        return refTable['cr'][0]
    if(hp>refTable['hp'][-1]):
        return refTable['cr'][-1]
    low=0
    index=0
    high=len(hps)-1
    while (hps[index]!=hp):
        index=max(((high-low)//2),1)+low
        if(hp<hps[index]):
            high = index
        elif (hp>hps[index]):
            low = index
        #print("{%d, %d, %d} %s"%(high,low,index,hps[index]))
    return refTable['cr'][index]
        
def ACCR(ac):
    acs=refTable['ac']
    if(ac<=13):
        return refTable['cr'][0]
    if(ac>19):
        return refTable['cr'][-1]
    index = 1
    while(ac!=int(acs[index])):
        index+=1
    return refTable['cr'][index]

def DEFCR(hp,ac):
    hpcr=HPCR(hp)
    accr=ACCR(ac)
    if(hpcr==accr):
        return hpcr
    else:
        
